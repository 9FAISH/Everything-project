import React, { useState, useEffect } from 'react';
import axios from 'axios';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const VulnerabilityScanner = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [devices, setDevices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedVuln, setSelectedVuln] = useState(null);
  const [scanTarget, setScanTarget] = useState('all');
  const [isScanning, setIsScanning] = useState(false);
  const [filterSeverity, setFilterSeverity] = useState('all');

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      const [vulnResponse, deviceResponse] = await Promise.all([
        axios.get(`${API}/vulnerabilities`),
        axios.get(`${API}/devices`)
      ]);
      
      setVulnerabilities(vulnResponse.data);
      setDevices(deviceResponse.data);
    } catch (error) {
      console.error('Failed to fetch data:', error);
    } finally {
      setLoading(false);
    }
  };

  const startVulnerabilityScan = async () => {
    setIsScanning(true);
    
    try {
      const response = await axios.post(`${API}/scans`, {
        scan_type: 'vulnerability_scan',
        target: scanTarget,
        options: {}
      });

      // Poll for scan completion
      const pollInterval = setInterval(async () => {
        try {
          const scanResponse = await axios.get(`${API}/scans/${response.data.id}`);
          
          if (scanResponse.data.status === 'completed' || scanResponse.data.status === 'failed') {
            clearInterval(pollInterval);
            setIsScanning(false);
            fetchData(); // Refresh vulnerabilities
          }
        } catch (error) {
          clearInterval(pollInterval);
          setIsScanning(false);
        }
      }, 3000);
      
    } catch (error) {
      console.error('Failed to start vulnerability scan:', error);
      setIsScanning(false);
      alert('Failed to start vulnerability scan. Please try again.');
    }
  };

  const analyzeVulnerability = async (vulnId) => {
    try {
      const response = await axios.post(`${API}/vulnerabilities/${vulnId}/analyze`);
      
      // Update the vulnerability with AI analysis
      setVulnerabilities(prev => 
        prev.map(v => 
          v.id === vulnId 
            ? { ...v, ai_analysis: response.data.analysis }
            : v
        )
      );
      
      if (selectedVuln && selectedVuln.id === vulnId) {
        setSelectedVuln({ ...selectedVuln, ai_analysis: response.data.analysis });
      }
    } catch (error) {
      console.error('Failed to analyze vulnerability:', error);
      alert('Failed to get AI analysis. Please try again.');
    }
  };

  const SeverityBadge = ({ severity }) => {
    const colors = {
      critical: 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400',
      high: 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400',
      medium: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400',
      low: 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400',
      info: 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400'
    };

    return (
      <span className={`px-2 py-1 rounded-full text-xs font-medium ${colors[severity] || colors.info}`}>
        {severity.toUpperCase()}
      </span>
    );
  };

  const formatDateTime = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('en-US', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getDeviceHostname = (deviceId) => {
    const device = devices.find(d => d.id === deviceId);
    return device ? (device.hostname || device.ip_address) : 'Unknown Device';
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => 
    filterSeverity === 'all' || vuln.severity === filterSeverity
  );

  const severityCounts = vulnerabilities.reduce((acc, vuln) => {
    acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
    return acc;
  }, {});

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            Vulnerability Scanner
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2">
            Identify and assess security vulnerabilities
          </p>
        </div>
      </div>

      {/* Scan Configuration */}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          Vulnerability Scan
        </h3>
        
        <div className="flex items-center space-x-4">
          <div className="flex-1">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Scan Target
            </label>
            <select
              value={scanTarget}
              onChange={(e) => setScanTarget(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              disabled={isScanning}
            >
              <option value="all">All Active Devices</option>
              {devices.filter(d => d.is_active).map(device => (
                <option key={device.id} value={device.ip_address}>
                  {device.hostname || device.ip_address} ({device.ip_address})
                </option>
              ))}
            </select>
          </div>
          
          <div className="flex items-end">
            <button
              onClick={startVulnerabilityScan}
              disabled={isScanning}
              className="px-6 py-2 bg-orange-600 hover:bg-orange-700 disabled:bg-gray-400 text-white font-medium rounded-md transition-colors duration-200 flex items-center space-x-2"
            >
              {isScanning ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>Scanning...</span>
                </>
              ) : (
                <>
                  <span>⚠️</span>
                  <span>Start Vulnerability Scan</span>
                </>
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Vulnerability Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                Total
              </p>
              <p className="text-2xl font-bold text-gray-900 dark:text-white">
                {vulnerabilities.length}
              </p>
            </div>
            <div className="w-12 h-12 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center">
              <span className="text-2xl">📊</span>
            </div>
          </div>
        </div>

        {['critical', 'high', 'medium', 'low'].map(severity => (
          <div key={severity} className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400 capitalize">
                  {severity}
                </p>
                <p className="text-2xl font-bold text-gray-900 dark:text-white">
                  {severityCounts[severity] || 0}
                </p>
              </div>
              <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${
                severity === 'critical' ? 'bg-red-100 dark:bg-red-900/20' :
                severity === 'high' ? 'bg-orange-100 dark:bg-orange-900/20' :
                severity === 'medium' ? 'bg-yellow-100 dark:bg-yellow-900/20' :
                'bg-blue-100 dark:bg-blue-900/20'
              }`}>
                <span className="text-2xl">
                  {severity === 'critical' ? '🔴' : 
                   severity === 'high' ? '🟠' :
                   severity === 'medium' ? '🟡' : '🔵'}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Vulnerability List */}
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
        <div className="p-6 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              Vulnerabilities ({filteredVulnerabilities.length})
            </h3>
            
            <div>
              <select
                value={filterSeverity}
                onChange={(e) => setFilterSeverity(e.target.value)}
                className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              >
                <option value="all">All Severities</option>
                <option value="critical">Critical</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>
            </div>
          </div>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full">
            <thead className="bg-gray-50 dark:bg-gray-700">
              <tr>
                <th className="text-left py-3 px-6 text-sm font-medium text-gray-900 dark:text-white">
                  Vulnerability
                </th>
                <th className="text-left py-3 px-6 text-sm font-medium text-gray-900 dark:text-white">
                  Device
                </th>
                <th className="text-left py-3 px-6 text-sm font-medium text-gray-900 dark:text-white">
                  Severity
                </th>
                <th className="text-left py-3 px-6 text-sm font-medium text-gray-900 dark:text-white">
                  CVE ID
                </th>
                <th className="text-left py-3 px-6 text-sm font-medium text-gray-900 dark:text-white">
                  Service/Port
                </th>
                <th className="text-left py-3 px-6 text-sm font-medium text-gray-900 dark:text-white">
                  Discovered
                </th>
                <th className="text-left py-3 px-6 text-sm font-medium text-gray-900 dark:text-white">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200 dark:divide-gray-600">
              {filteredVulnerabilities.length > 0 ? (
                filteredVulnerabilities.map((vuln) => (
                  <tr
                    key={vuln.id}
                    className="hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer"
                    onClick={() => setSelectedVuln(vuln)}
                  >
                    <td className="py-4 px-6">
                      <div>
                        <p className="text-sm font-medium text-gray-900 dark:text-white">
                          {vuln.title}
                        </p>
                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                          {vuln.description.substring(0, 100)}...
                        </p>
                      </div>
                    </td>
                    <td className="py-4 px-6 text-sm text-gray-900 dark:text-white">
                      {getDeviceHostname(vuln.device_id)}
                    </td>
                    <td className="py-4 px-6">
                      <SeverityBadge severity={vuln.severity} />
                    </td>
                    <td className="py-4 px-6 text-sm font-mono text-gray-900 dark:text-white">
                      {vuln.cve_id || 'N/A'}
                    </td>
                    <td className="py-4 px-6 text-sm text-gray-900 dark:text-white">
                      {vuln.affected_service ? (
                        <div>
                          <p>{vuln.affected_service}</p>
                          {vuln.port && (
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                              Port {vuln.port}
                            </p>
                          )}
                        </div>
                      ) : (
                        'General'
                      )}
                    </td>
                    <td className="py-4 px-6 text-sm text-gray-500 dark:text-gray-400">
                      {formatDateTime(vuln.discovered_at)}
                    </td>
                    <td className="py-4 px-6">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          analyzeVulnerability(vuln.id);
                        }}
                        className="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium"
                      >
                        🤖 AI Analysis
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="7" className="py-8 text-center text-gray-500 dark:text-gray-400">
                    No vulnerabilities found. Run a vulnerability scan to identify security issues.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Vulnerability Details Modal */}
      {selectedVuln && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-start justify-between mb-6">
                <div className="flex-1">
                  <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                    {selectedVuln.title}
                  </h3>
                  <div className="flex items-center space-x-4 mb-4">
                    <SeverityBadge severity={selectedVuln.severity} />
                    {selectedVuln.cvss_score && (
                      <span className="text-sm text-gray-600 dark:text-gray-400">
                        CVSS: {selectedVuln.cvss_score}
                      </span>
                    )}
                    {selectedVuln.cve_id && (
                      <span className="text-sm font-mono text-gray-600 dark:text-gray-400">
                        {selectedVuln.cve_id}
                      </span>
                    )}
                  </div>
                </div>
                <button
                  onClick={() => setSelectedVuln(null)}
                  className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200"
                >
                  ✕
                </button>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Description
                    </h4>
                    <p className="text-sm text-gray-900 dark:text-white bg-gray-50 dark:bg-gray-700 p-3 rounded">
                      {selectedVuln.description}
                    </p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Affected Device
                    </h4>
                    <p className="text-sm text-gray-900 dark:text-white">
                      {getDeviceHostname(selectedVuln.device_id)}
                    </p>
                  </div>
                  
                  {selectedVuln.affected_service && (
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Affected Service
                      </h4>
                      <p className="text-sm text-gray-900 dark:text-white">
                        {selectedVuln.affected_service}
                        {selectedVuln.port && ` (Port ${selectedVuln.port})`}
                      </p>
                    </div>
                  )}
                  
                  {selectedVuln.solution && (
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Solution
                      </h4>
                      <p className="text-sm text-gray-900 dark:text-white bg-green-50 dark:bg-green-900/20 p-3 rounded">
                        {selectedVuln.solution}
                      </p>
                    </div>
                  )}
                </div>
                
                <div className="space-y-4">
                  {selectedVuln.ai_analysis ? (
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        🤖 AI Security Analysis
                      </h4>
                      <div className="text-sm text-gray-900 dark:text-white bg-blue-50 dark:bg-blue-900/20 p-4 rounded whitespace-pre-wrap">
                        {selectedVuln.ai_analysis}
                      </div>
                    </div>
                  ) : (
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        AI Analysis
                      </h4>
                      <button
                        onClick={() => analyzeVulnerability(selectedVuln.id)}
                        className="w-full px-4 py-3 bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-200 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-900/30 transition-colors duration-200 flex items-center justify-center space-x-2"
                      >
                        <span>🤖</span>
                        <span>Get AI Security Analysis</span>
                      </button>
                    </div>
                  )}
                  
                  {selectedVuln.references && selectedVuln.references.length > 0 && (
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        References
                      </h4>
                      <div className="space-y-1">
                        {selectedVuln.references.map((ref, index) => (
                          <a
                            key={index}
                            href={ref}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="block text-sm text-blue-600 dark:text-blue-400 hover:underline"
                          >
                            {ref}
                          </a>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  <div className="text-xs text-gray-500 dark:text-gray-400 space-y-1">
                    <p>Discovered: {formatDateTime(selectedVuln.discovered_at)}</p>
                    <p>Status: {selectedVuln.is_resolved ? 'Resolved' : 'Open'}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityScanner;